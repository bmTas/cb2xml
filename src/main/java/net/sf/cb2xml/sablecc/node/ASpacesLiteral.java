/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ASpacesLiteral extends PLiteral
{
    private TSpaces _spaces_;

    public ASpacesLiteral()
    {
        // Constructor
    }

    public ASpacesLiteral(
        @SuppressWarnings("hiding") TSpaces _spaces_)
    {
        // Constructor
        setSpaces(_spaces_);

    }

    @Override
    public Object clone()
    {
        return new ASpacesLiteral(
            cloneNode(this._spaces_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASpacesLiteral(this);
    }

    public TSpaces getSpaces()
    {
        return this._spaces_;
    }

    public void setSpaces(TSpaces node)
    {
        if(this._spaces_ != null)
        {
            this._spaces_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._spaces_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._spaces_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._spaces_ == child)
        {
            this._spaces_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._spaces_ == oldChild)
        {
            setSpaces((TSpaces) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
