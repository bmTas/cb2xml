/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ANullsLiteral extends PLiteral
{
    private TNulls _nulls_;

    public ANullsLiteral()
    {
        // Constructor
    }

    public ANullsLiteral(
        @SuppressWarnings("hiding") TNulls _nulls_)
    {
        // Constructor
        setNulls(_nulls_);

    }

    @Override
    public Object clone()
    {
        return new ANullsLiteral(
            cloneNode(this._nulls_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANullsLiteral(this);
    }

    public TNulls getNulls()
    {
        return this._nulls_;
    }

    public void setNulls(TNulls node)
    {
        if(this._nulls_ != null)
        {
            this._nulls_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nulls_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nulls_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nulls_ == child)
        {
            this._nulls_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nulls_ == oldChild)
        {
            setNulls((TNulls) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
