/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.cb2xml.sablecc.analysis;

import net.sf.cb2xml.sablecc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseARecordDescription(ARecordDescription node);
    void caseASingleGroupItem(ASingleGroupItem node);
    void caseASequenceGroupItem(ASequenceGroupItem node);
    void caseAItemElementaryItem(AItemElementaryItem node);
    void caseARenamesItemElementaryItem(ARenamesItemElementaryItem node);
    void caseAValueItemElementaryItem(AValueItemElementaryItem node);
    void caseAItem(AItem node);
    void caseADataNameDataNameOrFiller(ADataNameDataNameOrFiller node);
    void caseAFillerDataNameOrFiller(AFillerDataNameOrFiller node);
    void caseARedefinesClause(ARedefinesClause node);
    void caseASingleClauseSequence(ASingleClauseSequence node);
    void caseASequenceClauseSequence(ASequenceClauseSequence node);
    void caseABlankWhenZeroClauseClause(ABlankWhenZeroClauseClause node);
    void caseADateFormatClauseClause(ADateFormatClauseClause node);
    void caseAExternalClauseClause(AExternalClauseClause node);
    void caseAGlobalClauseClause(AGlobalClauseClause node);
    void caseAJustifiedClauseClause(AJustifiedClauseClause node);
    void caseAOccursClauseClause(AOccursClauseClause node);
    void caseAPictureClauseClause(APictureClauseClause node);
    void caseASignClauseClause(ASignClauseClause node);
    void caseASynchronizedClauseClause(ASynchronizedClauseClause node);
    void caseAUsageClauseClause(AUsageClauseClause node);
    void caseAValueClauseClause(AValueClauseClause node);
    void caseABlankWhenZeroClause(ABlankWhenZeroClause node);
    void caseADateFormatClause(ADateFormatClause node);
    void caseAExternalClause(AExternalClause node);
    void caseAGlobalClause(AGlobalClause node);
    void caseAJustifiedClause(AJustifiedClause node);
    void caseAOccursClause(AOccursClause node);
    void caseAFixedOccursFixedOrVariable(AFixedOccursFixedOrVariable node);
    void caseAVariableOccursFixedOrVariable(AVariableOccursFixedOrVariable node);
    void caseAOccursTo(AOccursTo node);
    void caseAAscendingOrDescendingKeyPhrase(AAscendingOrDescendingKeyPhrase node);
    void caseAAscendingAscendingOrDescending(AAscendingAscendingOrDescending node);
    void caseADescendingAscendingOrDescending(ADescendingAscendingOrDescending node);
    void caseAIndexedByPhrase(AIndexedByPhrase node);
    void caseAPictureClause(APictureClause node);
    void caseASignClause(ASignClause node);
    void caseASignIs(ASignIs node);
    void caseALeadingLeadingOrTrailing(ALeadingLeadingOrTrailing node);
    void caseATrailingLeadingOrTrailing(ATrailingLeadingOrTrailing node);
    void caseASeparateCharacter(ASeparateCharacter node);
    void caseASynchronizedClause(ASynchronizedClause node);
    void caseALeftLeftOrRight(ALeftLeftOrRight node);
    void caseARightLeftOrRight(ARightLeftOrRight node);
    void caseAUsageClause(AUsageClause node);
    void caseAUsageIs(AUsageIs node);
    void caseABinaryUsagePhrase(ABinaryUsagePhrase node);
    void caseACompUsagePhrase(ACompUsagePhrase node);
    void caseAComp1UsagePhrase(AComp1UsagePhrase node);
    void caseAComp2UsagePhrase(AComp2UsagePhrase node);
    void caseAComp3UsagePhrase(AComp3UsagePhrase node);
    void caseAComp4UsagePhrase(AComp4UsagePhrase node);
    void caseAComp5UsagePhrase(AComp5UsagePhrase node);
    void caseAComp6UsagePhrase(AComp6UsagePhrase node);
    void caseADisplayUsagePhrase(ADisplayUsagePhrase node);
    void caseADisplay1UsagePhrase(ADisplay1UsagePhrase node);
    void caseAIndexUsagePhrase(AIndexUsagePhrase node);
    void caseANationalUsagePhrase(ANationalUsagePhrase node);
    void caseAObjectReferencePhraseUsagePhrase(AObjectReferencePhraseUsagePhrase node);
    void caseAPackedDecimalUsagePhrase(APackedDecimalUsagePhrase node);
    void caseAPointerUsagePhrase(APointerUsagePhrase node);
    void caseAProcedurePointerUsagePhrase(AProcedurePointerUsagePhrase node);
    void caseAFunctionPointerUsagePhrase(AFunctionPointerUsagePhrase node);
    void caseAObjectReferencePhrase(AObjectReferencePhrase node);
    void caseARenamesItem(ARenamesItem node);
    void caseAThroughPhrase(AThroughPhrase node);
    void caseAValueClause(AValueClause node);
    void caseAValueItem(AValueItem node);
    void caseAValueValueOrValues(AValueValueOrValues node);
    void caseAValuesValueOrValues(AValuesValueOrValues node);
    void caseASingleLiteralSequence(ASingleLiteralSequence node);
    void caseASequenceLiteralSequence(ASequenceLiteralSequence node);
    void caseAThroughSingleLiteralSequence(AThroughSingleLiteralSequence node);
    void caseAThroughSequenceLiteralSequence(AThroughSequenceLiteralSequence node);
    void caseAZerosLiteral(AZerosLiteral node);
    void caseASpacesLiteral(ASpacesLiteral node);
    void caseAHighValuesLiteral(AHighValuesLiteral node);
    void caseALowValuesLiteral(ALowValuesLiteral node);
    void caseAQuotesLiteral(AQuotesLiteral node);
    void caseANullsLiteral(ANullsLiteral node);
    void caseANumberLiteral(ANumberLiteral node);
    void caseANumericLiteralLiteral(ANumericLiteralLiteral node);
    void caseAAlphanumericLiteralLiteral(AAlphanumericLiteralLiteral node);
    void caseASingleCharacterString(ASingleCharacterString node);
    void caseASequenceCharacterString(ASequenceCharacterString node);
    void caseADataNameCharacterSubstring(ADataNameCharacterSubstring node);
    void caseAPlusCharacterSubstring(APlusCharacterSubstring node);
    void caseAMinusCharacterSubstring(AMinusCharacterSubstring node);
    void caseAStarCharacterSubstring(AStarCharacterSubstring node);
    void caseASlashCharacterSubstring(ASlashCharacterSubstring node);
    void caseADollarCharacterSubstring(ADollarCharacterSubstring node);
    void caseACommaCharacterSubstring(ACommaCharacterSubstring node);
    void caseANumberCharacterSubstring(ANumberCharacterSubstring node);
    void caseANumericLiteralCharacterSubstring(ANumericLiteralCharacterSubstring node);
    void caseABracketedNumberCharacterSubstring(ABracketedNumberCharacterSubstring node);
    void caseADotMinusCharacterSubstring(ADotMinusCharacterSubstring node);
    void caseADotPlusCharacterSubstring(ADotPlusCharacterSubstring node);
    void caseADotZeeCharacterSubstring(ADotZeeCharacterSubstring node);
    void caseABracketedNumber(ABracketedNumber node);
    void caseANumberNot88Number(ANumberNot88Number node);
    void caseANumber88Number(ANumber88Number node);

    void caseTWhiteSpaces(TWhiteSpaces node);
    void caseTComment(TComment node);
    void caseTDot(TDot node);
    void caseTComma(TComma node);
    void caseTSlash(TSlash node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTDollar(TDollar node);
    void caseTLparen(TLparen node);
    void caseTRparen(TRparen node);
    void caseTNumber88(TNumber88 node);
    void caseTNumberNot88(TNumberNot88 node);
    void caseTAlphanumericLiteral(TAlphanumericLiteral node);
    void caseTNumericLiteral(TNumericLiteral node);
    void caseTDotZee(TDotZee node);
    void caseTDotMinus(TDotMinus node);
    void caseTDotPlus(TDotPlus node);
    void caseTAll(TAll node);
    void caseTAre(TAre node);
    void caseTAscending(TAscending node);
    void caseTBinary(TBinary node);
    void caseTBlank(TBlank node);
    void caseTBy(TBy node);
    void caseTCharacter(TCharacter node);
    void caseTComp(TComp node);
    void caseTComp1(TComp1 node);
    void caseTComp2(TComp2 node);
    void caseTComp3(TComp3 node);
    void caseTComp4(TComp4 node);
    void caseTComp5(TComp5 node);
    void caseTComp6(TComp6 node);
    void caseTDate(TDate node);
    void caseTDepending(TDepending node);
    void caseTDescending(TDescending node);
    void caseTDisplay(TDisplay node);
    void caseTDisplay1(TDisplay1 node);
    void caseTExternal(TExternal node);
    void caseTFiller(TFiller node);
    void caseTFormat(TFormat node);
    void caseTFunctionPointer(TFunctionPointer node);
    void caseTGlobal(TGlobal node);
    void caseTHighValues(THighValues node);
    void caseTIndex(TIndex node);
    void caseTIndexed(TIndexed node);
    void caseTIs(TIs node);
    void caseTJustified(TJustified node);
    void caseTKey(TKey node);
    void caseTLeading(TLeading node);
    void caseTLeft(TLeft node);
    void caseTLowValues(TLowValues node);
    void caseTNational(TNational node);
    void caseTNative(TNative node);
    void caseTNulls(TNulls node);
    void caseTObject(TObject node);
    void caseTOccurs(TOccurs node);
    void caseTOn(TOn node);
    void caseTPackedDecimal(TPackedDecimal node);
    void caseTPicture(TPicture node);
    void caseTPointer(TPointer node);
    void caseTProcedurePointer(TProcedurePointer node);
    void caseTQuotes(TQuotes node);
    void caseTRedefines(TRedefines node);
    void caseTReference(TReference node);
    void caseTRenames(TRenames node);
    void caseTRight(TRight node);
    void caseTSeparate(TSeparate node);
    void caseTSign(TSign node);
    void caseTSpaces(TSpaces node);
    void caseTSynchronized(TSynchronized node);
    void caseTThrough(TThrough node);
    void caseTTimes(TTimes node);
    void caseTTo(TTo node);
    void caseTTrailing(TTrailing node);
    void caseTUsage(TUsage node);
    void caseTValue(TValue node);
    void caseTValues(TValues node);
    void caseTWhen(TWhen node);
    void caseTZeros(TZeros node);
    void caseTDataName(TDataName node);
    void caseTUnknown(TUnknown node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
